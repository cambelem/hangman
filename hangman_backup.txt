//FUNCTIONING WEBSITE BACKUP


<?php

	class Hangman 
	{
		


		public function __construct()
		{
			//build switch statement from the view


			$action = $_GET['action'];
			$isletter = false;
			$pic = glob('mod/hangman/img/' . "*.gif");


			$blankarray = array();
			if (isset($_SESSION['correctletters']))
			{
				$blankarray = $_SESSION['correctletters'];
			}

			switch ($action)
			{				
				case 'new_game':
					$l = range('a','z');

					$tpl['correct'] = $this->ranWord();
					$tpl['pic'][]= array('PICTURE' => "<img src= $pic[0] />");

					foreach ($l as $i)
					{
						$link = PHPWS_Text::moduleLink($i,'hangman', array('action'=> 'guess', 'letter'=>$i));
						$tpl['letters'][] = array('LETTER' => $link);
					}	
					break;

				case 'guess':
					$le = $_GET['letter'];

					$isletter = $this->findingLetters($le, $_SESSION['word']);

					$list = $_SESSION['unUsedLetters'];				
					
					//PICTURE FUNCTION !FIX!
					if (!$isletter)
					{
						$_SESSION['c'] = $_SESSION['c'] + 1;
						$c = $_SESSION['c'];
						if ($c < 7)
						{
							$tpl['pic'][]= array('PICTURE' => "<img src= $pic[$c] />");
						}
						else
						{
							$tpl['pic'][]= array('PICTURE' => "<img src= $pic[6] />");
						}					
					}
					else
					{
						$p = $_SESSION['c'];
						$tpl['pic'][]= array('PICTURE' => "<img src= $pic[$p] />");
					}
					
					//PRINT ALL UNUSED LETTERS
					foreach ($list as $x)
					{
						$link2 = PHPWS_Text::moduleLink($x,'hangman', array('action'=> 'guess', 'letter'=>$x));
						$tpl['letters'][] = array('LETTER' => $link2);
					}		


					//DISPLAY USED, UNUSED, AND BLANK SPACES !CREATE FUNCTION!
					$a = str_split($_SESSION['word']);
					for ($z = 0; $z < count($a); $z++)
					{
						if ($le == $a[$z])
						{
							$tpl['correct'][] = array('CORRECTLETTERS' => $le);
						}
						elseif (in_array($a[$z], $blankarray))
						{
							$tpl['correct'][] = array('CORRECTLETTERS' => $a[$z]);
						}				
						else
						{
							$tpl['correct'][] = array('CORRECTLETTERS' => "_ ");					
						}
					}
																										
					break;

				default:
					if (!isset($_SESSION['word']))
					{
						$this->ranWord();
					}	
			}
			
			$istrue = $this->checkWinOrLoss($blankarray , $_SESSION['word']);
			if ($istrue == 0)
			{
				unset($tpl['letters']); 
			}

			$module = "hangman";
			$file = "hangview.tpl";

			$nglink = PHPWS_Text::moduleLink('New Game','hangman', array('action'=> 'new_game'));
			$tpl['ngame'][]= array('NEW_GAME' => $nglink);


			echo PHPWS_Template::process($tpl, $module, $file);
		}

		//This function grabs a new random word and resets
		//the SESSION variables back to default.
		public function ranWord()
		{	
			$tempArray = array();
			$maxAttempts = 6;
			$_SESSION['attempts'] = ($maxAttempts);
			$_SESSION['count'] = 0;
			$_SESSION['c'] = 0;
			unset($_SESSION['correctletters']);
			unset($_SESSION['unUsedLetters']);
	

			$myfile = file_get_contents(PHPWS_SOURCE_DIR . 'mod/hangman/hangwords.txt');
			
			$words = preg_split('/[\s]+/', $myfile);
			$random = rand(0,count($words));
			$_SESSION['word'] = ($words[$random]);

			$answer = str_split($_SESSION['word']);
			for ($i = 0; $i < count($answer); $i++)
			{						
				$tempArray[$i] = array('CORRECTLETTERS' => "_ ");
			}

			return $tempArray;

		}

		public function picture()
		{
			

		}

		public function guess()
		{

		}

		//Grab numerical value of letter, compare, and if true
		//place in used letters and take out of unusedletters
		public function findingLetters($guess, $word)
		{
			$letters = range('a','z');
			$inWord = false;
			$usedLetters = array();
			$answer = str_split($word);

			for ($i = 0; $i < count($answer); $i++)
			{
				if ($guess == $answer[$i])
				{
					$inWord = true;
					$_SESSION['correctletters'][] = $guess;
					$usedLetters[$_SESSION['count']] = $guess;
				}

			}

			$_SESSION['count'] = $_SESSION['count'] + 1;
			
			if ($inWord == false)
			{
				$_SESSION['attempts'] = $_SESSION['attempts'] - 1;
			}
			

			if (!isset($_SESSION['unUsedLetters']))
			{
				$unUsedLetters = $letters;
			}
			else
			{
				$unUsedLetters = $_SESSION['unUsedLetters'];
			}

			foreach ($unUsedLetters as &$letter)
			{
				if ($letter == $guess)
				{
					$letter = 0;			
				}
			}
			$_SESSION['unUsedLetters'] = $unUsedLetters;
		
			return $inWord;
		}

		//compare number of guesses 
		public function checkWinOrLoss($correctarray,$word)
		{
			if ($_SESSION['attempts'] == 0)
			{
				echo "You lost!";
				echo "The word was $word.";
				return 0;
			}
			
			if (count($correctarray) == count(str_split($word)) - 1)
			{
				echo "You win!";
				return 0;
			}
			return 1;
		}


	}


//				


?>
